const { CognitoIdentityProviderClient, GetUserCommand } = require("@aws-sdk/client-cognito-identity-provider");

// アクセストークンの検証
async function verifyAccessToken(accessToken) {
    try{
        console.log ('debug_log_token_handler_0:start');
        const region  = process.env.MY_REGION; // AWSリージョン
        const client = new CognitoIdentityProviderClient({ region: region });    

        const getUserCommand           = new GetUserCommand({ AccessToken: accessToken });
        const cognitoUser              = await client.send(getUserCommand);
        var   userIdAttribute;
        var   nutritionistIdAttribute;
        try {
            userIdAttribute          = cognitoUser.UserAttributes.find(attr => attr.Name === 'custom:userId').Value;
        } catch (error) {
            console.log ('debug_log_token_handler_1:user id not found');
        }
        try {
            nutritionistIdAttribute  = cognitoUser.UserAttributes.find(attr => attr.Name === 'custom:nutritionistId').Value;
        } catch (error) {
            console.log ('debug_log_token_handler_2:nutritionist id not found');
        }

        const userId         = userIdAttribute ? userIdAttribute : null;
        const nutritionistId = nutritionistIdAttribute ? nutritionistIdAttribute : null;
        console.log ('debug_log_token_handler_3:attribute', userIdAttribute, nutritionistIdAttribute);
        console.log ('debug_log_token_handler_4:got id', userId, nutritionistId);
        console.log ('debug_log_token_handler_5:object', {
            result: Boolean(userId || nutritionistId),
            userId: userId,
            nutritionistId: nutritionistId
        });
        return {
            result: Boolean(userId || nutritionistId),
            userId: userId,
            nutritionistId: nutritionistId
        };
    } catch (error) {
        console.error('Failed to verify access tokens:', error);
        return {
            result: false,
            userId: null,
            nutritionistId: null
        };
    }
}

module.exports = { verifyAccessToken };